{"version":3,"sources":["Components/Contacts/Contacts.module.css","Components/Filter/Filter.module.css","App.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","Components/Form/Form.js","Components/Contacts/Contacts.js","redux/contacts/contacts-selectors.js","Components/Filter/Filter.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","Components/Form/Form.module.css"],"names":["module","exports","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilterValue","axios","defaults","baseURL","newContact","dispatch","actions","post","then","response","data","catch","error","contactId","delete","get","Form","submitMethod","value","useSelector","state","useDispatch","useState","name","setName","number","setNumber","id","setId","uniqId","uuidv4","handleClick","event","target","trim","resetState","className","s","Container","onSubmit","preventDefault","contacts","find","toLowerCase","toast","operations","Label","htmlFor","Input","type","pattern","title","required","onChange","Button","Contacts","filter","contact","includes","useEffect","map","List","onClick","getFilter","Filter","evt","action","App","Title","contactsReducer","createReducer","_","payload","filterReducer","rootReducer","combineReducers","componentReducer","store","configureStore","reducer","devTools","process","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa89d5be.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"Contacts_List__2V3YO\",\"Button\":\"Contacts_Button__3WuIa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Label\":\"Filter_Label__1q_sH\",\"Input\":\"Filter_Input__2MQXK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Title\":\"App_Title__2qxNr\"};","import { createAction } from '@reduxjs/toolkit';\n\nconst fetchContactRequest = createAction('contacts/fetchContactRequest');\nconst fetchContactSuccess = createAction('contacts/fetchContactSuccess');\nconst fetchContactError = createAction('contacts/fetchContactError');\n\nconst addContactRequest = createAction('contacts/addContactRequest');\nconst addContactSuccess = createAction('contacts/addContactSuccess');\nconst addContactError = createAction('contacts/addContactError');\n\nconst deleteContactRequest = createAction('contacts/deleteContactRequest');\nconst deleteContactSuccess = createAction('contacts/deleteContactSuccess');\nconst deleteContactError = createAction('contacts/deleteContactError');\n\nconst changeFilterValue = createAction('contacts/changeFilterValue');\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  changeFilterValue,\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n};\n\n// const getSubmitData = data => {\n//   return { type: actionTypes.SUBMIT, payload: data };\n// };\n// const handleDelete = data => {\n//   return {\n//     type: actionTypes.DELETE,\n//     payload: data,\n//   };\n// };\n// const changeFilterValue = value => {\n//   return {\n//     type: actionTypes.FILTER,\n//     payload: value,\n//   };\n// };\n\n//todo\n// import { createAction } from '@reduxjs/toolkit';\n\n// const addContactRequest = createAction('contacts/addContactRequest');\n// const addContactSuccess = createAction('contacts/addContactSuccess');\n// const addContactError = createAction('contacts/addContactError');\n\n// const getSubmitData = createAction('contacts/getSubmitData');\n// const handleDelete = createAction('contacts/handleDelete');\n// const changeFilterValue = createAction('contacts/changeFilterValue');\n\n// // eslint-disable-next-line import/no-anonymous-default-export\n// export default {\n//   addContactRequest,\n//   addContactSuccess,\n//   addContactError,\n//   getSubmitData,\n//   handleDelete,\n//   changeFilterValue,\n// };\n","import axios from 'axios';\nimport actions from './contacts-actions';\n\naxios.defaults.baseURL = 'http://localhost:9999';\n\nconst fetchContact = () => dispatch => {\n  dispatch(actions.fetchContactRequest());\n\n  axios\n    .get('/contacts')\n    .then(response => {\n      return dispatch(actions.fetchContactSuccess(response.data));\n    })\n    .catch(error => {\n      return dispatch(actions.addContactError(error));\n    });\n};\n\nconst addContacts = newContact => dispatch => {\n  dispatch(actions.addContactRequest('Mother Fucker'));\n  axios\n    .post('/contacts', newContact)\n    .then(response => {\n      return dispatch(actions.addContactSuccess(response.data));\n    })\n    .catch(error => {\n      return dispatch(actions.addContactError(error));\n    });\n};\n\nconst deleteContact = contactId => dispatch => {\n  dispatch(actions.deleteContactRequest());\n  axios.delete(`/contacts/${contactId}`).then(() => {\n    return dispatch(actions.deleteContactSuccess(contactId));\n  });\n};\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { addContacts, deleteContact, fetchContact };\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport s from './Form.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport operations from '../../redux/contacts/contacts-operations';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst Form = ({ submitMethod }) => {\n  Form.propTypes = {\n    submitMethod: PropTypes.func,\n  };\n  const value = useSelector(state => state);\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const [id, setId] = useState('');\n\n  const uniqId = uuidv4();\n\n  const handleClick = event => {\n    const { value, name, id } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value.trim());\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n    setId(id);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (\n      value.contacts.find(\n        state => state.name.toLowerCase() === name.toLowerCase(),\n      )\n    ) {\n      resetState();\n      toast.error('Hey, this name always here!');\n      return;\n    }\n    dispatch(operations.addContacts({ name, number, id }));\n    resetState();\n  };\n\n  const resetState = () => {\n    setName('');\n    setNumber('');\n    setId('');\n  };\n\n  return (\n    <div className={s.Container}>\n      <form className={s.Form} onSubmit={handleSubmit}>\n        <label className={s.Label} htmlFor={uniqId}>\n          Name\n          <input\n            className={s.Input}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={name}\n            onChange={handleClick}\n            id={uuidv4()}\n          />\n        </label>\n\n        <label>\n          Number\n          <input\n            type=\"tel\"\n            className={s.Input}\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            onChange={handleClick}\n            value={number}\n            id={uuidv4()}\n          />\n        </label>\n        <button type=\"submit\" className={s.Button}>\n          Отправить\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default Form;\n\n// import { connect} from 'react-redux';\n// const mapDispatchToProp = dispatch => {\n//   return {\n//     submitMethod: ({ name, number, id }) =>\n//       dispatch(action.getSubmitData({ name, number, id })),\n//   };\n// };\n// export default connect(null, mapDispatchToProp)(Form);\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Contacts.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport operations from '../../redux/contacts/contacts-operations';\n\nconst Contacts = () => {\n  const contacts = useSelector(({ contacts, filter }) => {\n    const visibleContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n    return visibleContacts;\n  });\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(operations.fetchContact());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <ul>\n        {contacts &&\n          contacts.map(contact => {\n            return (\n              <li className={s.List} key={contact.id}>\n                {contact.name}: {contact.number}\n                <button\n                  className={s.Button}\n                  type=\"button\"\n                  onClick={() => {\n                    dispatch(operations.deleteContact(contact.id));\n                  }}\n                >\n                  Delete\n                </button>\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Contacts;\n\nContacts.propTypes = {\n  contacts: PropTypes.array,\n  deleteFunction: PropTypes.func,\n};\n\n// import { connect } from 'react-redux';\n\n// const mapStateToProps = state => {\n//   const { contacts, filter } = state;\n//   const visibleContact = contacts.filter(contact =>\n//     contact.name.toLowerCase().includes(filter.toLowerCase()),\n//   );\n\n//   return {\n//     contacts: visibleContact,\n//   };\n// };\n// const mapDispatchToProp = dispatch => {\n//   return {\n//     deleteFunction: id => {\n//       return dispatch(action.handleDelete(id));\n//     },\n//   };\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProp)(Contacts);\n","export const getFilter = state => {\n  return state.filter;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport action from '../../redux/contacts/contacts-actions';\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label className={s.Label}>\n      Фильтр по имени:\n      <input\n        className={s.Input}\n        type=\"text\"\n        value={value}\n        onChange={evt => {\n          dispatch(action.changeFilterValue(evt.target.value));\n        }}\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\n// import { connect } from 'react-redux';\n\n// const mapStateToProps = state => {\n//   return {\n//     value: state.filter,\n//   };\n// };\n\n// const mapDispatchToProp = dispatch => {\n//   return {\n//     onChange: evt => dispatch(action.changeFilterValue(evt.target.value)),\n//   };\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProp)(Filter);\n","import React from 'react';\nimport Form from './Components/Form/Form';\nimport Contacts from './Components/Contacts/Contacts';\nimport Filter from './Components/Filter/Filter';\nimport s from './App.module.css';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport const App = () => {\n  return (\n    <>\n      <h1 className={s.Title}>PhoneBook</h1>\n      <Form />\n      <h2 className={s.Title}>Contacts</h2>\n      <Filter />\n      <Contacts />\n      <ToastContainer />\n    </>\n  );\n};\n","// import { toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './contacts-actions';\n\nconst contactsReducer = createReducer([], {\n  [actions.fetchContactSuccess]: (_, action) => {\n    return action.payload;\n  },\n  [actions.addContactSuccess]: (state, action) => {\n    // if (\n    //   state.find(\n    //     state => state.name.toLowerCase() === action.payload.name.toLowerCase(),\n    //   )\n    // ) {\n    //   toast.error('Hey, this name always here!');\n    //   return [...state];\n    // }\n    return [...state, action.payload];\n  },\n\n  [actions.deleteContactSuccess]: (state, action) => {\n    return state.filter(state => state.id !== action.payload);\n  },\n});\n\nconst filterReducer = createReducer('', {\n  [actions.changeFilterValue]: (_, action) => {\n    return action.payload;\n  },\n});\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { contactsReducer, filterReducer };\n\n// import actionTypes from './contacts-types';\n// const contacts = [];\n// const contactsReducer = (state = contacts, action) => {\n//   switch (action.type) {\n// case actionTypes.SUBMIT:\n//   if (\n//     state.find(\n//       state =>\n//         state.name.toLowerCase() === action.payload.name.toLowerCase(),\n//     )\n//   ) {\n//     toast.error('Hey, this name always here!');\n//     return [...state];\n//   }\n//   return [...state, action.payload];\n\n//     case actionTypes.DELETE:\n//       return state.filter(state => state.id !== action.payload);\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const filter = '';\n\n// const filterReducer = (state = filter, action) => {\n//   switch (action.type) {\n//     case actionTypes.FILTER:\n//       return action.payload;\n//     default:\n//       return state;\n//   }\n// };\n","import { combineReducers } from 'redux';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport componentReducer from './contacts/contacts-reducer';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\n// const myMiddleware = store => next => action => {\n//   console.log('My middleware');\n//   console.log(action);\n//   console.log(store.getState());\n// };\n\nconst rootReducer = combineReducers({\n  contacts: componentReducer.contactsReducer,\n  filter: componentReducer.filterReducer,\n});\n\nconst store = configureStore({\n  reducer: rootReducer,\n  devTools: process.env.NODE_ENV === 'development',\n  middleware: [\n    ...getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n    // myMiddleware,\n  ],\n});\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default store;\n\n// import { createStore, applyMiddleware, combineReducers } from 'redux';\n// import { composeWithDevTools } from 'redux-devtools-extension';\n// const reducer = combineReducers({\n//   contacts: componentReducer.contactsReducer,\n//   filter: componentReducer.filterReducer,\n// });\n// const store = createStore(reducer, composeWithDevTools());\n\n//todo\n// import { combineReducers, applyMiddleware } from 'redux';\n// import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n// import componentReducer from './contacts/contacts-reducer';\n// import {\n//   persistStore,\n//   persistReducer,\n//   FLUSH,\n//   REHYDRATE,\n//   PAUSE,\n//   PERSIST,\n//   PURGE,\n//   REGISTER,\n// } from 'redux-persist';\n// import storage from 'redux-persist/lib/storage';\n\n// const persistConfig = {\n//   key: 'contacts',\n//   storage,\n//   blacklist: ['filter'],\n// };\n\n// const rootReducer = combineReducers({\n//   contacts: componentReducer.contactsReducer,\n//   filter: componentReducer.filterReducer,\n// });\n\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\n\n// const store = configureStore({\n//   reducer: persistedReducer,\n//   devTools: process.env.NODE_ENV === 'development',\n//   middleware: getDefaultMiddleware({\n//     serializableCheck: {\n//       ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n//     },\n//   }),\n// });\n\n// const persistor = persistStore(store);\n// // eslint-disable-next-line import/no-anonymous-default-export\n// export default { store, persistor };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Form_Container__2LBkn\",\"Label\":\"Form_Label__1q0Y-\",\"Input\":\"Form_Input__29dvv\",\"Button\":\"Form_Button__Zkrc7\"};"],"sourceRoot":""}